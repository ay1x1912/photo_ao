generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Model {
  id              String        @id
  userId          String
  name            String
  age             Int
  type            Type
  trigerWord      String?
  tensorPath      String?
  status          Status        @default(Pending)
  ethinicity      Ethinicity
  eyeColor        EyeColor
  bold            Boolean       @default(false)
  falAiRequest_id String?
  zipUrl          String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime
  thumbnailUrl    String        @default("")
  user            user          @relation(fields: [userId], references: [id])
  OutputImage     OutputImage[]
}

model OutputImage {
  id              String   @id
  imageUrl        String
  modelId         String
  userId          String
  falAiRequest_id String?
  prompt          String
  status          Status   @default(Pending)
  createdAt       DateTime @default(now())
  updatedAt       DateTime
  Model           Model    @relation(fields: [modelId], references: [id])
}

model Pack {
  id           String        @id
  name         String
  description  String        @default("")
  thumbnailUrl String        @default("")
  PackPrompts  PackPrompts[]
}

model PackPrompts {
  id     String @id
  prompt String
  packId String
  Pack   Pack   @relation(fields: [packId], references: [id])
}

model Transaction {
  id        String                @id
  userId    String                @unique
  amount    Int
  currency  String
  paymentId String
  orderId   String
  plan      PlanType
  createdAt DateTime              @default(now())
  updatedAt DateTime
  status    TransactionStatusType @default(pending)

  @@index([userId])
}

model UserCredit {
  id        String   @id
  userId    String   @unique
  amount    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime

  @@index([userId])
}

model account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  expiresAt             DateTime?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  user                  user      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model user {
  id               String    @id
  name             String
  email            String    @unique
  emailVerified    Boolean   @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime
  twoFactorEnabled Boolean   @default(false)
  Model            Model[]
  account          account[]
  session          session[]
}

model verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime?
}

enum Ethinicity {
  White
  Black
  Asian_American
  East_Asian
  South_East_Asian
  South_Asian
  Middle_East
  Pacific
  Hispanic
}

enum EyeColor {
  Brown
  Blue
  Hazel_Green @map("Hazel Green")
  Gray
}

enum PlanType {
  basic
  premium
}

enum Status {
  Pending
  Success
  Failed
}

enum TransactionStatusType {
  pending
  paid
  refunded
  partially_refunded
}

enum Type {
  Man
  Women
  Other
}
