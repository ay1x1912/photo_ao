// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Type {
  Man
  Women
  Other
}

enum Ethinicity {
  White
  Black
  Asian_American
  East_Asian
  South_East_Asian
  South_Asian
  Middle_East
  Pacific
  Hispanic
}

enum EyeColor {
  Brown
  Blue
  Hazel_Green @map("Hazel Green")
  Gray
}

model User {
  id               String    @id @default(cuid())
  name             String
  email            String
  emailVerified    Boolean   @default(false)
  image            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  twoFactorEnabled Boolean   @default(false)
  Session          Session[]
  Account          Account[]
  models           Model[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Account {
  id           String    @id @default(cuid())
  accountId    String
  providerId   String
  userId       String
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken  String?
  refreshToken String?
  idToken      String?
  expiresAt    DateTime?
  password     String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}

model Model {
  id              String        @id @default(uuid())
  userId          String
  name            String
  age             Int
  type            Type
  trigerWord      String?
  tensorPath      String?
  thumbnailUrl    String        @default("")
  status          Status        @default(Pending)
  ethinicity      Ethinicity
  eyeColor        EyeColor
  bold            Boolean       @default(false)
  falAiRequest_id String?
  zipUrl          String
  outputImages    OutputImage[]
  user            User          @relation(references: [id], fields: [userId])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum Status {
  Pending
  Success
  Failed
}

model OutputImage {
  id              String   @id @default(uuid())
  imageUrl        String
  modelId         String
  userId          String
  falAiRequest_id String?
  prompt          String
  status          Status   @default(Pending)
  model           Model    @relation(references: [id], fields: [modelId])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Pack {
  id           String        @id
  name         String
  description  String        @default("")
  thumbnailUrl String        @default("")
  packPrompts  PackPrompts[]
}

model PackPrompts {
  id     String @id
  prompt String
  packId String
  pack   Pack   @relation(fields: [packId], references: [id])
}
